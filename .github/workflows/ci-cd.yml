  name: CI/CD Pipeline

  on:
    push:
      branches: [ main, develop ]
    pull_request:
      branches: [ main ]

  jobs:
    # Frontend Tests and Build
    frontend-test:
      name: Frontend Tests
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./frontend

      steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Clean install (deterministic)
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint -- --max-warnings=0

      - name: Build frontend
        run: npm run build

    # Backend Tests and Build
    backend-test:
      name: Backend Tests
      runs-on: ubuntu-latest
      defaults:
        run:
          working-directory: ./backend

      steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run type checking
        run: python -m pytest --version || echo "Pytest ready"

      - name: Test Docker build
        run: docker build -t voice-booking-backend .

    # Deploy to Railway (Backend)
    deploy-backend:
      name: Deploy Backend to Railway
      needs: [backend-test]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

      steps:
      - uses: actions/checkout@v4

      - name: Install Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway
        working-directory: ./backend
        run: railway up --service voice-booking-app-production --detach
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    # Deploy to Vercel (Frontend)
    deploy-frontend:
      name: Deploy Frontend to Vercel
      needs: [frontend-test]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      defaults:
        run:
          working-directory: ./frontend

      steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Clean install
        run: npm ci

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

    # Health Check Post Deployment
    health-check:
      name: Health Check
      needs: [deploy-backend, deploy-frontend]
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'

      steps:
      - name: Wait for deployment
        run: sleep 30

      - name: Check backend health
        run: |
          curl -f https://voice-booking-app-production.up.railway.app/health || exit 1

      - name: Check frontend
        run: |
          curl -f https://voice-booking-app.vercel.app || exit 1

      - name: Notify success
        if: success()
        run: echo "✅ Deployment successful and health checks passed!"

      - name: Notify failure
        if: failure()
        run: echo "❌ Deployment or health checks failed!"
